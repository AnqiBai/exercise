		.pos 0
init:	irmovl Stack, %esp
		irmovl Stack, %ebp
		call Main
		halt

		.align 4
array:	.long 0xa
		.long 0x9
		.long 0x8
		.long 0x7
		.long 0x1
		.long 0x2
		.long 0x3
		.long 0x4
		.long 0x111
		.long 0x6
		.long 0x7
		.long 0x8
		.long 0x7
		.long 0x7
		.long 0x6
		.long 0x5
		.long 0x4
		.long 0x3
		.long 0x2
		.long 0x1

Main:	pushl %ebp
		rrmovl %esp, %ebp
		irmovl $21, %eax
		pushl %eax
		irmovl array, %edx
		pushl %edx
		call bubble_a
		rrmovl %ebp, %esp
		popl %ebp
		ret

bubble_a:
		mrmovl	4(%esp), %edx
		mrmovl	8(%esp), %esi
		irmovl  $1, %eax
		subl	%eax, %esi
		jg  Inner	
		jmp	End
Loop:
		rrmovl %eax, %edi
		addl   %edi, %edi
		addl   %edi, %edi // %edi = 4i
		addl   %edx, %edi // data + 4i
		mrmovl (%edi), %ebx // %ebx = data[i]
		mrmovl 4(%edi), %ecx // %ecx = data[i + 1]
		rrmovl %ecx, %edi
		subl    %ebx, %edi
		jge	Test

//calculate data + 4i again
		rrmovl %eax, %edi
		addl   %edi, %edi
		addl   %edi, %edi // %edi = 4i
		addl   %edx, %edi // data + 4i
		rmmovl %ebx, 4(%edi)
		rmmovl %ecx, (%edi)

Test:	// for (i = 0; i < last; i++)
		irmovl $1, %edi
		addl %edi, %eax
		rrmovl %eax, %edi
		subl %esi, %edi
		jne	Loop
Outer:
		irmovl $1, %edi	
		subl   %edi, %esi
		je	End
Inner:
		irmovl	$0, %eax
		andl	%esi, %esi
		jg  Loop	
		jmp	Outer
End:
		ret

		.pos 0x300
Stack:
